package com.mqtt.temperature_publisher.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

@Service
@EnableScheduling
@Slf4j
@RequiredArgsConstructor
public class TemperaturePublisherService {
    private static final String TOPIC = "sensor/temperature";
    private final MqttClient mqttClient;
    private static final int QQS = 2;
    private static final int autoGeneratedTime = 5000;

    @Scheduled(fixedRate = autoGeneratedTime)
    public void publishTemperature() {
        try {
            double temperature = 15 + (Math.random() * 15);
            String payload = String.format("%.2f", temperature);
            MqttMessage message = new MqttMessage(payload.getBytes());
            message.setQos(QQS);
            mqttClient.publish(TOPIC, message);
            log.info("Published temperature: {}Â°C to topic: {}", payload, TOPIC);
        } catch (MqttException e) {
            log.error("Failed to publish temperature: {}", e.getMessage(), e);
        }
    }
}
